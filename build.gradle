buildscript {
    repositories {
        mavenCentral()
        maven {
            url = uri("https://packages.confluent.io/maven/")
        }
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
        maven {
            url = uri("https://jitpack.io")
        }
    }
}

plugins {
    id 'java'
    id "com.github.imflog.kafka-schema-registry-gradle-plugin" version "1.1.1"
    id "com.github.davidmc24.gradle.plugin.avro-base" version "1.0.0"
}

group 'cl.atromilen'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        url = uri("https://packages.confluent.io/maven/")
    }

    maven {
        url = uri("https://jitpack.io")
    }
}

dependencies {
    implementation 'org.apache.avro:avro:1.11.0'
    implementation('org.apache.kafka:kafka-clients:3.1.0')
    implementation "io.confluent:kafka-avro-serializer:7.0.1"

//    LOGGERS
    implementation 'org.slf4j:slf4j-simple:1.7.36'
}

schemaRegistry {
    url = 'http://localhost:8081'

    register {
        subject('avro-movies-value', 'src/main/avro/movie.avsc','AVRO')
    }

    task runAvroProducer(type: JavaExec){
        classpath sourceSets.main.runtimeClasspath
        mainClass = "cl.atromilen.kafkastreams.producers.avro.AvroProducer"
    }
}

import com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask

def generateAvro = tasks.register("generateAvro", GenerateAvroJavaTask){
    source("src/main/avro")
    outputDir = file("src/main/java")
}

tasks.named("compileJava").configure{
    source(generateAvro)
}
